apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    osinstance/service: backendmanage
    osinstance/service-class: backend
    osinstance/name: {{ .URL }}
  name: backendmanage
  namespace: {{ .StackName }}
{{- with .Services.backendManage }}
spec:
  replicas: {{ or .CustomKeys.replicas 1 }}
  selector:
    matchLabels:
      osinstance/service: backendmanage
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        osinstance/name: {{ $.URL }}
        osinstance/service: backendmanage
        osinstance/service-class: backend
    spec:
      containers:
        - name: backendmanage
          image: {{ .ContainerRegistry }}/openslides-backend:{{ .Tag }}
          imagePullPolicy: Always
          ports:
            - containerPort: 9002
          startupProbe:
            httpGet:
              path: /system/action/health
              port: 9002
            periodSeconds: 1
            failureThreshold: 60
          readinessProbe:
            httpGet:
              path: /system/action/health
              port: 9002
            periodSeconds: 30
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /system/action/health
              port: 9002
            periodSeconds: 30
            failureThreshold: 3
          env:
            - name: OPENSLIDES_BACKEND_COMPONENT
              value: action
            {{- with .Environment }}{{ envMapToK8S . | marshalContent 12 }}{{- end }}
          envFrom:
            - configMapRef:
                name: default-environment
          resources: {}
          volumeMounts:
            - mountPath: /run/secrets/auth-token-key
              name: auth-token-key
            - mountPath: /run/secrets/auth-cookie-key
              name: auth-cookie-key
            - mountPath: /run/secrets/internal-auth-password
              name: internal-auth-password
            - mountPath: /run/secrets/postgres-password
              name: postgres-password
      restartPolicy: Always
      volumes:
        - name: auth-token-key
          secret:
            items:
              - key: auth-token-key
                path: auth-token-key
            secretName: auth-token-key
        - name: auth-cookie-key
          secret:
            items:
              - key: auth-cookie-key
                path: auth-cookie-key
            secretName: auth-cookie-key
        - name: internal-auth-password
          secret:
            items:
              - key: internal-auth-password
                path: internal-auth-password
            secretName: internal-auth-password
        - name: postgres-password
          secret:
            items:
              - key: postgres-password
                path: postgres-password
            secretName: postgres-password
status: {}
{{- end }}
